
import java.util.*;
import java.io.*;
public class Main {
    // TreeNode class
    public static class TreeNode{
        int data;
        TreeNode left;
        TreeNode right;
        TreeNode(int data){
            this.data = data;
            this.left = this.right = null;
        }
    }

    static TreeNode root = null;
    // Construction of BST
    public static TreeNode insert(TreeNode root, int value){
        if(root == null){
            root = new TreeNode(value);
            return root;
        }

        if(root.data > value){
            root.left = insert(root.left, value);
        }else{
            root.right = insert(root.right,value);
        }
        return root;
    }
    // Wrapper class of Insertion into Tree
    public static void insertIntoTree(int data){
        root = insert(root,data);
    }

    // Get minimum element in binary search tree
    public static TreeNode minimumElement(TreeNode root) {
        if (root.left == null)
            return root;
        else {
            return minimumElement(root.left);
        }
    }

    public static TreeNode deleteNode(TreeNode root, int value) {
        if (root == null)
            return null;
        if (root.data > value) {
            root.left = deleteNode(root.left, value);
        } else if (root.data < value) {
            root.right = deleteNode(root.right, value);
 
        } else {
            // if nodeToBeDeleted have both children
            if (root.left != null && root.right != null) {
                TreeNode temp = root;
                // Finding minimum element from right
                TreeNode minNodeForRight = minimumElement(temp.right);
                // Replacing current node with minimum node from right subtree
                root.data = minNodeForRight.data;
                // Deleting minimum node from right now
                root.right = deleteNode(root.right, minNodeForRight.data);
 
            }
            // if nodeToBeDeleted has only left child
            else if (root.left != null) {
                root = root.left;
            }
            // if nodeToBeDeleted has only right child
            else if (root.right != null) {
                root = root.right;
            }
            // if nodeToBeDeleted do not have child (Leaf node)
            else
                root = null;
        }
        return root;
    }
    public static void delete(int data){
        deleteNode(root,data);
    }
    public static void preOrder(TreeNode root){
        if(root == null){
            return;
        }
        System.out.print(root.data+" ");
        preOrder(root.left);
        preOrder(root.right);
    }
    public static void preOrderTraversal(){
        preOrder(root);
    }
    public static void main(String args[]) {
        //your code here
        Main ob = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        for(int i=0;i<n;i++){
            int num = sc.nextInt();
            ob.insertIntoTree(num);
        }
        ob.delete(k);
        ob.preOrderTraversal();
    }
}
